(function() {
    var type_impls = Object.fromEntries([["aya",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Ebpf\" class=\"impl\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#853\">Source</a><a href=\"#impl-Debug-for-Ebpf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"aya/struct.Ebpf.html\" title=\"struct aya::Ebpf\">Ebpf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#853\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","aya::bpf::Bpf"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ebpf\" class=\"impl\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#863-1069\">Source</a><a href=\"#impl-Ebpf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"aya/struct.Ebpf.html\" title=\"struct aya::Ebpf\">Ebpf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_file\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#880-884\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.Ebpf.html#tymethod.load_file\" class=\"fn\">load_file</a>&lt;P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(path: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"aya/enum.EbpfError.html\" title=\"enum aya::EbpfError\">EbpfError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Loads eBPF bytecode from a file.</p>\n<p>Parses the given object code file and initializes the <a href=\"aya/maps/index.html\" title=\"mod aya::maps\">maps</a> defined in it. If\nthe kernel supports <a href=\"aya/struct.Btf.html\" title=\"struct aya::Btf\">BTF</a> debug info, it is automatically loaded from\n<code>/sys/kernel/btf/vmlinux</code>.</p>\n<p>For more loading options, see <a href=\"aya/struct.EbpfLoader.html\" title=\"struct aya::EbpfLoader\">EbpfLoader</a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>aya::Ebpf;\n\n<span class=\"kw\">let </span>bpf = Ebpf::load_file(<span class=\"string\">\"file.o\"</span>)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#905-909\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.Ebpf.html#tymethod.load\" class=\"fn\">load</a>(data: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"aya/enum.EbpfError.html\" title=\"enum aya::EbpfError\">EbpfError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Loads eBPF bytecode from a buffer.</p>\n<p>Parses the object code contained in <code>data</code> and initializes the\n<a href=\"aya/maps/index.html\" title=\"mod aya::maps\">maps</a> defined in it. If the kernel supports <a href=\"aya/struct.Btf.html\" title=\"struct aya::Btf\">BTF</a>\ndebug info, it is automatically loaded from <code>/sys/kernel/btf/vmlinux</code>.</p>\n<p>For more loading options, see <a href=\"aya/struct.EbpfLoader.html\" title=\"struct aya::EbpfLoader\">EbpfLoader</a>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>aya::{Ebpf, Btf};\n<span class=\"kw\">use </span>std::fs;\n\n<span class=\"kw\">let </span>data = fs::read(<span class=\"string\">\"file.o\"</span>).unwrap();\n<span class=\"comment\">// load the BTF data from /sys/kernel/btf/vmlinux\n</span><span class=\"kw\">let </span>bpf = Ebpf::load(<span class=\"kw-2\">&amp;</span>data)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#918-920\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.Ebpf.html#tymethod.map\" class=\"fn\">map</a>(&amp;self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"enum\" href=\"aya/maps/enum.Map.html\" title=\"enum aya::maps::Map\">Map</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a reference to the map with the given name.</p>\n<p>The returned type is mostly opaque. In order to do anything useful with it you need to\nconvert it to a <a href=\"aya/maps/index.html\" title=\"mod aya::maps\">typed map</a>.</p>\n<p>For more details and examples on maps and their usage, see the <a href=\"aya/maps/index.html\" title=\"mod aya::maps\">maps module\ndocumentation</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#929-931\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.Ebpf.html#tymethod.map_mut\" class=\"fn\">map_mut</a>(&amp;mut self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"enum\" href=\"aya/maps/enum.Map.html\" title=\"enum aya::maps::Map\">Map</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the map with the given name.</p>\n<p>The returned type is mostly opaque. In order to do anything useful with it you need to\nconvert it to a <a href=\"aya/maps/index.html\" title=\"mod aya::maps\">typed map</a>.</p>\n<p>For more details and examples on maps and their usage, see the <a href=\"aya/maps/index.html\" title=\"mod aya::maps\">maps module\ndocumentation</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_map\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#945-947\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.Ebpf.html#tymethod.take_map\" class=\"fn\">take_map</a>(&amp;mut self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"aya/maps/enum.Map.html\" title=\"enum aya::maps::Map\">Map</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Takes ownership of a map with the given name.</p>\n<p>Use this when borrowing with <a href=\"aya/struct.Ebpf.html#method.map\" title=\"method aya::Ebpf::map\"><code>map</code></a> or <a href=\"aya/struct.Ebpf.html#method.map_mut\" title=\"method aya::Ebpf::map_mut\"><code>map_mut</code></a>\nis not possible (eg when using the map from an async task). The returned\nmap will be closed on <code>Drop</code>, therefore the caller is responsible for\nmanaging its lifetime.</p>\n<p>The returned type is mostly opaque. In order to do anything useful with it you need to\nconvert it to a <a href=\"aya/maps/index.html\" title=\"mod aya::maps\">typed map</a>.</p>\n<p>For more details and examples on maps and their usage, see the <a href=\"aya/maps/index.html\" title=\"mod aya::maps\">maps module\ndocumentation</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.maps\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#962-964\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.Ebpf.html#tymethod.maps\" class=\"fn\">maps</a>(&amp;self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = (&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>, &amp;<a class=\"enum\" href=\"aya/maps/enum.Map.html\" title=\"enum aya::maps::Map\">Map</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator over all the maps.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>(name, map) <span class=\"kw\">in </span>bpf.maps() {\n    <span class=\"macro\">println!</span>(\n        <span class=\"string\">\"found map `{}`\"</span>,\n        name,\n    );\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.maps_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#985-987\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.Ebpf.html#tymethod.maps_mut\" class=\"fn\">maps_mut</a>(&amp;mut self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = (&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>, &amp;mut <a class=\"enum\" href=\"aya/maps/enum.Map.html\" title=\"enum aya::maps::Map\">Map</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>A mutable iterator over all the maps.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>(<span class=\"kw\">_</span>, map) <span class=\"kw\">in </span>bpf.maps_mut() {\n    map.pin(pin_path)<span class=\"question-mark\">?</span>;\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.program\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#1005-1007\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.Ebpf.html#tymethod.program\" class=\"fn\">program</a>(&amp;self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"enum\" href=\"aya/programs/enum.Program.html\" title=\"enum aya::programs::Program\">Program</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a reference to the program with the given name.</p>\n<p>You can use this to inspect a program and its properties. To load and attach a program, use\n<a href=\"aya/struct.Ebpf.html#method.program_mut\" title=\"method aya::Ebpf::program_mut\">program_mut</a> instead.</p>\n<p>For more details on programs and their usage, see the <a href=\"aya/programs/index.html\" title=\"mod aya::programs\">programs module\ndocumentation</a>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>program = bpf.program(<span class=\"string\">\"SSL_read\"</span>).unwrap();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"program SSL_read is of type {:?}\"</span>, program.prog_type());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.program_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#1025-1027\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.Ebpf.html#tymethod.program_mut\" class=\"fn\">program_mut</a>(&amp;mut self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"enum\" href=\"aya/programs/enum.Program.html\" title=\"enum aya::programs::Program\">Program</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the program with the given name.</p>\n<p>Used to get a program before loading and attaching it. For more details on programs and\ntheir usage, see the <a href=\"aya/programs/index.html\" title=\"mod aya::programs\">programs module documentation</a>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>aya::programs::UProbe;\n\n<span class=\"kw\">let </span>program: <span class=\"kw-2\">&amp;mut </span>UProbe = bpf.program_mut(<span class=\"string\">\"SSL_read\"</span>).unwrap().try_into()<span class=\"question-mark\">?</span>;\nprogram.load()<span class=\"question-mark\">?</span>;\nprogram.attach(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"SSL_read\"</span>), <span class=\"number\">0</span>, <span class=\"string\">\"libssl\"</span>, <span class=\"prelude-val\">None</span>)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.programs\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#1043-1045\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.Ebpf.html#tymethod.programs\" class=\"fn\">programs</a>(&amp;self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = (&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>, &amp;<a class=\"enum\" href=\"aya/programs/enum.Program.html\" title=\"enum aya::programs::Program\">Program</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator over all the programs.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>(name, program) <span class=\"kw\">in </span>bpf.programs() {\n    <span class=\"macro\">println!</span>(\n        <span class=\"string\">\"found program `{}` of type `{:?}`\"</span>,\n        name,\n        program.prog_type()\n    );\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.programs_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#1066-1068\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.Ebpf.html#tymethod.programs_mut\" class=\"fn\">programs_mut</a>(&amp;mut self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = (&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>, &amp;mut <a class=\"enum\" href=\"aya/programs/enum.Program.html\" title=\"enum aya::programs::Program\">Program</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator mutably referencing all of the programs.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>(<span class=\"kw\">_</span>, program) <span class=\"kw\">in </span>bpf.programs_mut() {\n    program.pin(pin_path)<span class=\"question-mark\">?</span>;\n}</code></pre></div>\n</div></details></div></details>",0,"aya::bpf::Bpf"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[17461]}