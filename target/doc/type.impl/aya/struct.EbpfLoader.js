(function() {
    var type_impls = Object.fromEntries([["aya",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-EbpfLoader%3C'a%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#131\">Source</a><a href=\"#impl-Debug-for-EbpfLoader%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"aya/struct.EbpfLoader.html\" title=\"struct aya::EbpfLoader\">EbpfLoader</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#131\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","aya::bpf::BpfLoader"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-EbpfLoader%3C'_%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#846-850\">Source</a><a href=\"#impl-Default-for-EbpfLoader%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"aya/struct.EbpfLoader.html\" title=\"struct aya::EbpfLoader\">EbpfLoader</a>&lt;'_&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#847-849\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","aya::bpf::BpfLoader"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EbpfLoader%3C'a%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#167-712\">Source</a><a href=\"#impl-EbpfLoader%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"struct\" href=\"aya/struct.EbpfLoader.html\" title=\"struct aya::EbpfLoader\">EbpfLoader</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#169-179\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.EbpfLoader.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a new loader instance.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.btf\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#198-201\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.EbpfLoader.html#tymethod.btf\" class=\"fn\">btf</a>(&amp;mut self, btf: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a <a class=\"struct\" href=\"aya/struct.Btf.html\" title=\"struct aya::Btf\">Btf</a>&gt;) -&gt; &amp;mut Self</h4></section></summary><div class=\"docblock\"><p>Sets the target <a href=\"aya/struct.Btf.html\" title=\"struct aya::Btf\">BTF</a> info.</p>\n<p>The loader defaults to loading <code>BTF</code> info using <a href=\"aya/struct.Btf.html#method.from_sys_fs\" title=\"associated function aya::Btf::from_sys_fs\">Btf::from_sys_fs</a>.\nUse this method if you want to load <code>BTF</code> from a custom location or\npass <code>None</code> to disable <code>BTF</code> relocations entirely.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>aya::{EbpfLoader, Btf, Endianness};\n\n<span class=\"kw\">let </span>bpf = EbpfLoader::new()\n    <span class=\"comment\">// load the BTF data from a custom location\n    </span>.btf(Btf::parse_file(<span class=\"string\">\"/custom_btf_file\"</span>, Endianness::default()).ok().as_ref())\n    .load_file(<span class=\"string\">\"file.o\"</span>)<span class=\"question-mark\">?</span>;\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allow_unsupported_maps\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#222-225\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.EbpfLoader.html#tymethod.allow_unsupported_maps\" class=\"fn\">allow_unsupported_maps</a>(&amp;mut self) -&gt; &amp;mut Self</h4></section></summary><div class=\"docblock\"><p>Allows programs containing unsupported maps to be loaded.</p>\n<p>By default programs containing unsupported maps will fail to load. This\nmethod can be used to configure the loader so that unsupported maps will\nbe loaded, but won’t be accessible from userspace. Can be useful when\nusing unsupported maps that are only accessed from eBPF code and don’t\nrequire any userspace interaction.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>aya::EbpfLoader;\n\n<span class=\"kw\">let </span>bpf = EbpfLoader::new()\n    .allow_unsupported_maps()\n    .load_file(<span class=\"string\">\"file.o\"</span>)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_pin_path\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#243-246\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.EbpfLoader.html#tymethod.map_pin_path\" class=\"fn\">map_pin_path</a>&lt;P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;mut self, path: P) -&gt; &amp;mut Self</h4></section></summary><div class=\"docblock\"><p>Sets the base directory path for pinned maps.</p>\n<p>Pinned maps will be loaded from <code>path/MAP_NAME</code>.\nThe caller is responsible for ensuring the directory exists.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>aya::EbpfLoader;\n\n<span class=\"kw\">let </span>bpf = EbpfLoader::new()\n    .map_pin_path(<span class=\"string\">\"/sys/fs/bpf/my-program\"</span>)\n    .load_file(<span class=\"string\">\"file.o\"</span>)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_global\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#287-295\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.EbpfLoader.html#tymethod.set_global\" class=\"fn\">set_global</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"aya/struct.GlobalData.html\" title=\"struct aya::GlobalData\">GlobalData</a>&lt;'a&gt;&gt;&gt;(\n    &amp;mut self,\n    name: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>,\n    value: T,\n    must_exist: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,\n) -&gt; &amp;mut Self</h4></section></summary><div class=\"docblock\"><p>Sets the value of a global variable.</p>\n<p>If the <code>must_exist</code> argument is <code>true</code>, <a href=\"aya/struct.EbpfLoader.html#method.load\" title=\"method aya::EbpfLoader::load\"><code>EbpfLoader::load</code></a> will fail with <a href=\"aya_obj/obj/enum.ParseError.html#variant.SymbolNotFound\" title=\"variant aya_obj::obj::ParseError::SymbolNotFound\"><code>ParseError::SymbolNotFound</code></a> if the loaded object code does not contain the variable.</p>\n<p>From Rust eBPF, a global variable can be defined as follows:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[no_mangle]\n</span><span class=\"kw\">static </span>VERSION: i32 = <span class=\"number\">0</span>;</code></pre></div>\n<p>Then it can be accessed using <code>core::ptr::read_volatile</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>version = core::ptr::read_volatile(<span class=\"kw-2\">&amp;</span>VERSION);</code></pre></div>\n<p>The type of a global variable must be <code>Pod</code> (plain old data), for instance <code>u8</code>, <code>u32</code> and\nall other primitive types. You may use custom types as well, but you must ensure that those\ntypes are <code>#[repr(C)]</code> and only contain other <code>Pod</code> types.</p>\n<p>From C eBPF, you would annotate a global variable as <code>volatile const</code>.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>aya::EbpfLoader;\n\n<span class=\"kw\">let </span>bpf = EbpfLoader::new()\n    .set_global(<span class=\"string\">\"VERSION\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>, <span class=\"bool-val\">true</span>)\n    .set_global(<span class=\"string\">\"PIDS\"</span>, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234u16</span>, <span class=\"number\">5678</span>], <span class=\"bool-val\">true</span>)\n    .load_file(<span class=\"string\">\"file.o\"</span>)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_max_entries\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#313-316\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.EbpfLoader.html#tymethod.set_max_entries\" class=\"fn\">set_max_entries</a>(&amp;mut self, name: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>, size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; &amp;mut Self</h4></section></summary><div class=\"docblock\"><p>Set the max_entries for specified map.</p>\n<p>Overwrite the value of max_entries of the map that matches\nthe provided name before the map is created.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>aya::EbpfLoader;\n\n<span class=\"kw\">let </span>bpf = EbpfLoader::new()\n    .set_max_entries(<span class=\"string\">\"map\"</span>, <span class=\"number\">64</span>)\n    .load_file(<span class=\"string\">\"file.o\"</span>)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extension\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#335-338\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.EbpfLoader.html#tymethod.extension\" class=\"fn\">extension</a>(&amp;mut self, name: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; &amp;mut Self</h4></section></summary><div class=\"docblock\"><p>Treat the provided program as an <a href=\"aya/programs/extension/struct.Extension.html\" title=\"struct aya::programs::extension::Extension\"><code>Extension</code></a></p>\n<p>When attempting to load the program with the provided <code>name</code>\nthe program type is forced to be ] <a href=\"aya/programs/extension/struct.Extension.html\" title=\"struct aya::programs::extension::Extension\"><code>Extension</code></a> and is not\ninferred from the ELF section name.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>aya::EbpfLoader;\n\n<span class=\"kw\">let </span>bpf = EbpfLoader::new()\n    .extension(<span class=\"string\">\"myfunc\"</span>)\n    .load_file(<span class=\"string\">\"file.o\"</span>)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.verifier_log_level\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#353-356\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.EbpfLoader.html#tymethod.verifier_log_level\" class=\"fn\">verifier_log_level</a>(&amp;mut self, level: <a class=\"struct\" href=\"aya/struct.VerifierLogLevel.html\" title=\"struct aya::VerifierLogLevel\">VerifierLogLevel</a>) -&gt; &amp;mut Self</h4></section></summary><div class=\"docblock\"><p>Sets BPF verifier log level.</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>aya::{EbpfLoader, VerifierLogLevel};\n\n<span class=\"kw\">let </span>bpf = EbpfLoader::new()\n    .verifier_log_level(VerifierLogLevel::VERBOSE | VerifierLogLevel::STATS)\n    .load_file(<span class=\"string\">\"file.o\"</span>)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_file\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#368-374\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.EbpfLoader.html#tymethod.load_file\" class=\"fn\">load_file</a>&lt;P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;mut self, path: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"aya/struct.Ebpf.html\" title=\"struct aya::Ebpf\">Ebpf</a>, <a class=\"enum\" href=\"aya/enum.EbpfError.html\" title=\"enum aya::EbpfError\">EbpfError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Loads eBPF bytecode from a file.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>aya::EbpfLoader;\n\n<span class=\"kw\">let </span>bpf = EbpfLoader::new().load_file(<span class=\"string\">\"file.o\"</span>)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method\"><a class=\"src rightside\" href=\"src/aya/bpf.rs.html#388-711\">Source</a><h4 class=\"code-header\">pub fn <a href=\"aya/struct.EbpfLoader.html#tymethod.load\" class=\"fn\">load</a>(&amp;mut self, data: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"aya/struct.Ebpf.html\" title=\"struct aya::Ebpf\">Ebpf</a>, <a class=\"enum\" href=\"aya/enum.EbpfError.html\" title=\"enum aya::EbpfError\">EbpfError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Loads eBPF bytecode from a buffer.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>aya::EbpfLoader;\n<span class=\"kw\">use </span>std::fs;\n\n<span class=\"kw\">let </span>data = fs::read(<span class=\"string\">\"file.o\"</span>).unwrap();\n<span class=\"kw\">let </span>bpf = EbpfLoader::new().load(<span class=\"kw-2\">&amp;</span>data)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details></div></details>",0,"aya::bpf::BpfLoader"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[17633]}