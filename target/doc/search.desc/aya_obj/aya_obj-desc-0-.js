searchState.loadedDescShard("aya_obj", 0, "An eBPF object file parsing library with BTF and …\nAn error returned from the verifier.\nBTF loading, parsing and relocation.\nReturns the argument unchanged.\neBPF bindings generated by rust-bindgen\nCalls <code>U::from(self)</code>.\nLink type bindings.\nMap struct and type bindings.\nCreate a new verifier log.\nObject file loading, parsing, and relocation.\nProgram struct and type bindings.\nProgram relocation handling.\nBPF Type Format metadata.\nThe error type returned when <code>BTF</code> operations fail.\nData in the <code>.BTF.ext</code> section\nAvailable BTF features\nThe error type returned by <code>Object::relocate_btf</code>.\nError parsing file\nA collection of FuncSecInfo collected from the <code>func_info</code> …\nA collection of bpf_func_info collected from the …\nbtf type that is not VAR found in DATASEC\nError parsing BTF header\ninvalid BTF info\ninvalid BTF line infos\ninvalid BTF relocation info segment\ninvalid BTF relocation kind\ninvalid BTF string offset\nunable to get symbol name\ninvalid BTF type info segment\ninvalid BTF type kind\nA collection of bpf_line_info collected from the …\nLoading the btf failed\nmaximum depth reached resolving BTF type\noffset not found for symbol\nunexpected btf type id\nunknown BTF type id\nunknown BTF type\nunable to determine the size of section\nAdds a string to BTF metadata, returning an offset\nAdds a type to BTF metadata, returning a type id\nReturns true if the BTF_TYPE_DATASEC is supported.\nReturns true if the BTF_DECL_TAG is supported.\nReturns true if the BTF_KIND_ENUM64 is supported.\nReturns true if the BTF_FLOAT is supported.\nReturns true if the BTF_TYPE_FUNC is supported.\nReturns true if the BTF_TYPE_FUNC_GLOBAL is supported.\nReturns true if the BTF_KIND_FUNC_PROTO is supported.\nReturns true if the BTF_TYPE_TAG is supported.\nThe FuncSecInfo subsections for some sections, referenced …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads BTF metadata from <code>/sys/kernel/btf/vmlinux</code>.\nInfo entries\nEncodes the bpf_func_info entries.\nReturns a type id matching the type name and BtfKind\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of bpf_func_info entries.\nReturns the number of entries.\nThe bpf_line_info entries\nEncodes the entries.\nCreates a new empty instance with its header initialized\nThe number of info entries\nThe number of entries\nParses BTF from binary data of the given endianness\nLoads BTF metadata from the given <code>path</code>.\nThe function name\nEncodes the metadata as BTF format\nsource of the error\nThe <code>std::io::Error</code> returned by the <code>BPF_BTF_LOAD</code> syscall.\ntype kind\ntype kind\nlength\nlength\noffset\noffset\noffset\nfile path\nsection length\nsection length\nname of the section\nname of the symbol\ntype id\ntype id\ntype id\ntype name\nThe error log produced by the kernel verifier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA map defined in the <code>.maps</code> section\nA BTF-defined map, most likely from a <code>.maps</code> section.\nBTF definition of a map\nPin by the name\nA map defined in the <code>maps</code> section\nA map declared with legacy BPF map declaration style, most …\nMap data defined in <code>maps</code> or <code>.maps</code> sections\nNo pinning\nThe error type returned when failing to parse a PinningType\nThe pinning type\nUnsupported pinning type\nMap definition in legacy BPF map declaration style\nBTF type id of the map key\nBTF type id of the map value\nReturns the map data\nThe map data\nReturns the map data as mutable\nThe definition of the map\nThe definition of the map\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nId\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the key size in bytes\nThe key_size\nReturns the map flags\nMap flags\nReturns the map type\nThe map type\nReturns the max entry number\nMax entry number\nReturns the pinning type of the map\nPinning type\nReturns the section index\nThe section index\nReturns the section kind.\nThe section kind\nSets the max entry number\nSet the value size in bytes\nReturns the symbol index.\nThe symbol index.\nReturns the value size in bytes\nThe value size\nThe unsupported pinning type\n<code>.bss</code>\n<code>.BTF</code>\nError parsing BTF object\n<code>.BTF.ext</code>\n<code>.maps</code>\n<code>.data</code>\nThe kind of an ELF section.\nFeatures implements BPF and BTF feature detection\nAn eBPF function\nInvalid bindings to the bpf type from the parsed/received …\n<code>license</code>\n<code>maps</code>\nNo BTF parsed for object\nThe loaded object file representation\nErrors caught during parsing the object file\nAn eBPF program\nA program section\nSection types containing eBPF programs\n<code>.rodata</code>\n<code>.text</code>\nUndefined\n<code>version</code>\nThe address of the program\nThe address\nReturns whether BPF program cookie is supported.\nReturns whether BPF program global data is supported.\nReturns whether BPF program names and map names are …\nReturns whether bpf_links are supported for …\nReturns whether the bpf_probe_read_kernel helper is …\nIf BTF is supported, returns which BTF features are …\nProgram BTF\nProgram BTF.ext\nCopies a block of eBPF instructions\nReturns whether XDP CPU Maps support chained program IDs.\nReturns whether XDP Device Maps support chained program …\nThe endianness\nFixes up and sanitizes BTF data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe function info\nFunction info record size\nThe key used by Object::functions\nFunctions\nThe eBPF byte code instructions\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKernel version\nThe kernel version\nProgram license\nThe license\nThe line info\nLine info record size\nReferenced maps\nThe function name\nParses the binary data as an object file into an Object\nParses a bpf_map_info into a Map.\nPatches map data\nReturns whether <code>bpf_prog_info</code> supports <code>gpl_compatible</code> …\nReturns whether <code>bpf_prog_info</code> supports <code>nr_map_ids</code> &amp; <code>map_ids</code>…\nA hash map of programs, using the program names parsed in …\nRelocates programs inside this object file with loaded BTF …\nRelocates function calls\nRelocates the map references\nSanitize BPF functions.\nThe section containing the program\nThe section index of the program\nThe section index\nThe section offset\nThe value parsed/received.\nCgroup socket programs.\nCgroup socket address programs.\nCgroup socket option programs.\nXDP programs.\nDefines where to attach a <code>CgroupSock</code> program.\nCalled after the IPv4 bind events.\nCalled after the IPv6 bind events.\nAttach to IPv4 connect events.\nAttach to IPv6 connect events.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAttach to IPv4 bind events.\nAttach to IPv6 bind events.\nDefines where to attach a <code>CgroupSockAddr</code> program.\nAttach to IPv4 connect events.\nAttach to IPv6 connect events.\nAttach to IPv4 getpeername events.\nAttach to IPv6 getpeername events.\nAttach to IPv4 getsockname events.\nAttach to IPv6 getsockname events.\nAttach to IPv4 udp_recvmsg events.\nAttach to IPv6 udp_recvmsg events.\nAttach to IPv4 udp_sendmsg events.\nAttach to IPv6 udp_sendmsg events.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDefines where to attach a <code>CgroupSockopt</code> program.\nAttach to GetSockopt.\nAttach to SetSockopt.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAttach to a cpumap. Requires kernel 5.9 or later.\nAttach to a devmap. Requires kernel 5.8 or later.\nAttach to a network interface.\nDefines where to attach an <code>XDP</code> program.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe error type returned by <code>Object::relocate_maps</code> and …\nInvalid relocation offset\nRelocation failures\nSection not found\nUnknown function\nUnknown function\nUnknown symbol\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe function address\nThe function address\nThe caller name\nThe symbol index\nThe relocation offset\nThe relocation number\nThe section index\nThe function section index\nThe symbol index\nThe symbol name")