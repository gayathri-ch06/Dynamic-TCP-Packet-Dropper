searchState.loadedDescShard("aya", 0, "Big endian byte order.\nThe main entry point into the library, used to work with …\nThe error type returned by <code>Bpf::load_file</code> and <code>Bpf::load</code>.\nBuilder style API for advanced loading of eBPF programs.\nBPF Type Format metadata.\nThe error type returned when <code>BTF</code> operations fail.\nError parsing BTF object\nError parsing BTF object\nError performing relocations\nError performing relocations\nPin by the name\nEnables debug verifier logging.\nSets no verifier logging.\nThe main entry point into the library, used to work with …\nThe error type returned by <code>Ebpf::load_file</code> and <code>Ebpf::load</code>.\nBuilder style API for advanced loading of eBPF programs.\nAn endianness that is selectable at run-time.\nError loading file\nError parsing file\nError loading file\nGlobal data that can be exported to eBPF programs before …\nbtf type that is not VAR found in DATASEC\nError parsing BTF header\ninvalid BTF info\ninvalid BTF line infos\ninvalid BTF relocation info segment\ninvalid BTF relocation kind\ninvalid BTF string offset\nunable to get symbol name\ninvalid BTF type info segment\ninvalid BTF type kind\nLittle endian byte order.\nLoading the btf failed\nA map error\nA map error\nmaximum depth reached resolving BTF type\nNo BTF parsed for object\nNo BTF parsed for object\nNo pinning\nError parsing BPF object\nError parsing BPF object\nThe pinning type\nMarker trait for types that can safely be converted to and …\nA program error\nA program error\nError performing relocations\nError performing relocations\nEnables verifier stats.\noffset not found for symbol\nunexpected btf type id\nUnexpected pinning type\nUnexpected pinning type\nunknown BTF type id\nunknown BTF type\nunable to determine the size of section\nEnables verbose verifier logging.\nUsed to set the verifier log level flags in EbpfLoader.\nAdds a string to BTF metadata, returning an offset\nAdds a type to BTF metadata, returning a type id\nGet a flags value with all known bits set.\nAllows programs containing unsupported maps to be loaded.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nMap definition in legacy BPF map declaration style\nSets the target BTF info.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nTreat the provided program as an <code>Extension</code>\nReturns a reference to the detected BPF features.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nLoads BTF metadata from <code>/sys/kernel/btf/vmlinux</code>.\nId\nReturns a type id matching the type name and BtfKind\nInclude bytes from a file for use in a subsequent …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe key_size\nLoads eBPF bytecode from a buffer.\nLoads eBPF bytecode from a buffer.\nLoads eBPF bytecode from a file.\nLoads eBPF bytecode from a file.\nReturns a reference to the map with the given name.\nMap flags\nReturns a mutable reference to the map with the given name.\nSets the base directory path for pinned maps.\nThe map type\nData structures used to setup and share data with eBPF …\nAn iterator over all the maps.\nA mutable iterator over all the maps.\nMax entry number\nCreates a new empty instance with its header initialized\nCreates a new loader instance.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nParses BTF from binary data of the given endianness\nLoads BTF metadata from the given <code>path</code>.\nPinning BPF objects to the BPF filesystem.\nPinning type\nReturns a reference to the program with the given name.\nReturns a mutable reference to the program with the given …\neBPF program types.\nAn iterator over all the programs.\nAn iterator mutably referencing all of the programs.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the value of a global variable.\nSet the max_entries for specified map.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nA collection of system calls for performing eBPF related …\nTakes ownership of a map with the given name.\nEncodes the metadata as BTF format\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUtility functions.\nThe value size\nSets BPF verifier log level.\nThe original io::Error\nThe value encountered\nThe file path\nsource of the error\nThe <code>std::io::Error</code> returned by the <code>BPF_BTF_LOAD</code> syscall.\ntype kind\ntype kind\nlength\nlength\noffset\noffset\noffset\nfile path\nsection length\nsection length\nname of the section\nname of the symbol\ntype id\ntype id\ntype id\ntype name\nThe error log produced by the kernel verifier.\nThe original io::Error\nThe value encountered\nThe file path\nAn Arena map type.\nAn Array map type. See <code>Array</code> for the map implementation.\nAn <code>Array</code> map.\nAn Array of Maps map type.\nA Bloom Filter map type. See <code>BloomFilter</code> for the map …\nA <code>BloomFilter</code> map.\nA cGroup Array map type.\nA cGroup Storage map type.\nA cGroup Storage map type.\nA CPU Map type. See <code>CpuMap</code> for the map implementation.\nA <code>CpuMap</code> map.\nFailed to create map\nA Device Map type. See <code>DevMap</code> for the map implementation.\nA <code>DevMap</code> map.\nA Device Hash Map type. See <code>DevMapHash</code> for the map …\nA <code>DevMapHash</code> map.\nElement not found\nA Hash map type. See <code>HashMap</code> for the map implementation.\nA <code>HashMap</code> map.\nA Hash of Maps map type.\nAn Inode Storage map type.\nInvalid key size\nInvalid map type encontered\nInvalid map name encountered\nInvalid value size\nAn IO error occurred\nAn iterable map\nKey not found\nA Longest Prefix Match (LPM) Trie map type. See <code>LpmTrie</code> for\nA <code>LpmTrie</code> map.\nA Least Recently Used (LRU) Hash map type. See <code>HashMap</code> for …\nA <code>HashMap</code> map that uses a LRU eviction policy.\nA Least Recently Used (LRU) per-CPU Hash map type. See …\neBPF map types.\nA generic handle to a BPF map.\nErrors occuring from working with Maps\nA map file descriptor.\nProvides Provides metadata information about a loaded eBPF …\nIterator returned by <code>map.iter()</code>.\nIterator returned by <code>map.keys()</code>.\nThe type of eBPF map.\nIndex is out of bounds\nA per-CPU Array map type. See <code>PerCpuArray</code> for the map …\nA <code>PerCpuArray</code> map.\nA per-CPU cGroup Storage map type.\nA per-CPU Hash map type. See <code>PerCpuHashMap</code> for the map …\nA <code>PerCpuHashMap</code> map.\nA <code>PerCpuHashMap</code> map that uses a LRU eviction policy.\nA slice of per-CPU values.\nA Perf Event Array map type. See <code>PerfEventArray</code> and …\nA <code>PerfEventArray</code> map.\nCould not pin map\nProgram IDs are not supported\nA Program Array map type. See <code>ProgramArray</code> for the map …\nA <code>ProgramArray</code> map.\nProgam Not Loaded\nA Queue map type. See <code>Queue</code> for the map implementation.\nA <code>Queue</code> map.\nA Reuseport Socket Array map type.\nA Ring Buffer map type. See <code>RingBuf</code> for the map …\nA <code>RingBuf</code> map.\nA Socket-local Storage map type.\nA Socket Hash map type. See <code>SockHash</code> for the map …\nA <code>SockHash</code> map\nA Socket Map type. See <code>SockMap</code> for the map implementation.\nA <code>SockMap</code> map.\nA Stack map type. See <code>Stack</code> for the map implementation.\nA <code>Stack</code> map.\nA Stack Trace map type. See <code>StackTraceMap</code> for the map …\nA <code>StackTraceMap</code> map.\nA Struct Ops map type.\nSyscall failed\nA Task Storage map type.\nAn unspecified program type.\nUnsupported Map type\nAn unsupported map type.\nA User Ring Buffer map type.\nAn XDP Socket Map type. See <code>XskMap</code> for the map …\nA <code>XskMap</code> map.\nArray types.\nA Bloom Filter.\nCreates a new map with the provided <code>name</code>\nReturns a file descriptor referencing the map.\nReturns the file descriptor of the map.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads a map from a file descriptor.\nLoads map info from a map ID.\nLoads a map from a map id.\nLoads a map from a pinned path in bpffs.\nLoads a map from a pinned path in bpffs.\nGet the value for the provided <code>key</code>\nHash map types.\nThe unique ID for this map.\nReturns the kernel’s information about the loaded map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key size for this map in bytes.\nReturns an iterator of <code>MapInfo</code> over all eBPF maps on the …\nA LPM Trie.\nGet a generic map handle\nThe flags used in loading this map.\nThe type of map.\nThe maximum number of entries in this map.\nThe name of the map, limited to 16 bytes.\nThe name of the map as a &amp;str.\nRing buffer types used to receive events from eBPF …\nPins the map to a BPF filesystem.\nAllows the map to be pinned to the provided path.\nA FIFO queue.\nA ring buffer map that may be used to receive events from …\nSocket maps.\nA LIFO stack.\nA hash map of kernel or user space stack traces.\nThe value size for this map in bytes.\nXDP maps.\nError code\nThe reason for the failure\nSize expected\nSize expected\nIndex accessed\nOriginal io::Error\nThe map type\nThe map type\nMap size\nThe map name\nMap name\nThe map name\nSize encountered\nSize encountered\nA fixed-size array.\nA per-CPU fixed-size array.\nAn array of eBPF program file descriptors used as a jump …\nClears the value at index in the jump table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value stored at the given index.\nReturns a slice of values - one for each CPU - stored at …\nAn iterator over the indices of the array that point to a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator over the elements of the array. The iterator …\nAn iterator over the elements of the array. The iterator …\nReturns the number of elements in the array.\nReturns the number of elements in the array.\nPins the map to a BPF filesystem.\nPins the map to a BPF filesystem.\nPins the map to a BPF filesystem.\nSets the value of the element at the given index.\nSets the values - one for each CPU - at the given index.\nSets the target program file descriptor for the given …\nA Bloom Filter.\nQuery the existence of the element.\nReturns the argument unchanged.\nInserts a value into the map.\nCalls <code>U::from(self)</code>.\nPins the map to a BPF filesystem.\nA hash map that can be shared between eBPF programs and …\nSimilar to <code>HashMap</code> but each CPU holds a separate value for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a slice of values - one for each CPU - associated …\nReturns a copy of the value associated with the key.\nInserts a slice of values - one for each CPU - for the …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\nAn iterator visiting all keys in arbitrary order. The …\nPins the map to a BPF filesystem.\nPins the map to a BPF filesystem.\nRemoves a key from the map.\nRemoves a key from the map.\nA Key for an LpmTrie map.\nA Longest Prefix Match Trie.\nReturns the data stored in the Key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a copy of the value associated with the longest …\nInserts a key value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator visiting all key-value pairs. The iterator …\nAn iterator visiting all keys. The iterator element type …\nCreates a new key.\nPins the map to a BPF filesystem.\nReturns the number of bits in the data to be matched.\nRemoves an element from the map.\nA <code>Future</code> based map that can be used to receive events from …\nA <code>Future</code> based ring buffer that can receive events from …\nReturn type of <code>read_events()</code>.\nAn IO error occurred.\nthe page count value passed to <code>PerfEventArray::open</code> is …\n<code>mmap</code>-ping the buffer failed.\n<code>read_events()</code> was called with a buffer that is not large …\n<code>read_events()</code> was called with no output buffers.\n<code>perf_event_open</code> failed.\nPerf buffer error.\nA map that can be used to receive events from eBPF …\nA ring buffer that can receive events from eBPF programs.\nThe <code>PERF_EVENT_IOC_ENABLE</code> ioctl failed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of events lost.\nOpens the perf buffer at the given index.\nOpens the perf buffer at the given index.\nPins the map to a BPF filesystem.\nPins the map to a BPF filesystem.\nThe number of events read.\nReads events from the buffer.\nReads events from the buffer.\nReturns true if the buffer contains events that haven’t …\nthe source of this error\nthe source of this error\nthe source of this error\nthe page count\nexpected size\nA FIFO queue.\nReturns the number of elements the queue can hold.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPins the map to a BPF filesystem.\nRemoves the first element and returns it.\nAppends an element at the end of the queue.\nA map that can be used to receive events from eBPF …\nThe current outstanding item read from the ringbuf.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to take a new entry from the ringbuf.\nA hash map of TCP or UDP sockets.\nAn array of TCP or UDP sockets.\nA socket map file descriptor.\nRemoves the socket stored at <code>index</code> from the map.\nReturns the map’s file descriptor.\nReturns the map’s file descriptor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the fd of the socket stored at the given key.\nAn iterator over the indices of the array that point to a …\nInserts a socket under the given key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\nPins the map to a BPF filesystem.\nPins the map to a BPF filesystem.\nRemoves a socket from the map.\nStores a socket into the map.\nCreates a new instance that shares the same underlying …\nA LIFO stack.\nReturns the number of elements the stack can hold.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPins the map to a BPF filesystem.\nRemoves the last element and returns it.\nPushes an element on the stack.\nA stack frame.\nA kernel or user space stack trace.\nA hash map of kernel or user space stack traces.\nReturns the frames in this stack trace.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the stack trace with the given stack_id.\nThe stack trace id as returned by <code>bpf_get_stackid()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe instruction pointer of this frame.\nAn iterator visiting all (<code>stack_id</code>, <code>stack_trace</code>) pairs in …\nPins the map to a BPF filesystem.\nRemoves the stack trace with the given stack_id.\nAn iterator visiting all the stack_ids in arbitrary order. …\nChained programs are not supported.\nAn array of available CPUs.\nAn array of network devices.\nAn hashmap of network devices.\nMap operation failed.\nErrors occuring from working with XDP maps.\nAn array of AF_XDP sockets.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the queue size and optional program for a given …\nReturns the target interface index and optional program at …\nReturns the target interface index and optional program …\nInserts an ifindex and optionally a chained program in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator over the elements of the map.\nAn iterator over the elements of the array.\nAn iterator over the elements of the devmap in arbitrary …\nAn iterator visiting all keys in arbitrary order.\nReturns the number of elements in the array.\nReturns the number of elements in the array.\nReturns the number of elements in the array.\nPins the map to a BPF filesystem.\nPins the map to a BPF filesystem.\nPins the map to a BPF filesystem.\nPins the map to a BPF filesystem.\nRemoves a value from the map.\nSets the queue size at the given CPU index, and optionally …\nSets the target interface index at index, and optionally a …\nSets the <code>AF_XDP</code> socket at a given index.\nThe path for the BPF object is not valid.\nThe object FD is not known by Aya.\nAn error ocurred working with a pinned BPF object.\nAn error ocurred making a syscall.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe source error.\nObject name.\nThe path.\nThe program is already attached.\nThe program is already loaded.\nAttach to IPv4 bind events.\nAttach to IPv6 bind events.\nAn error occurred while working with BTF.\nA <code>BtfTracePoint</code> program\nA cGroup Device program type. See <code>CgroupDevice</code> for the …\nA <code>CgroupDevice</code> program\nA cGroup Socket Buffer program type. See <code>CgroupSkb</code> for the …\nA <code>CgroupSkb</code> program\nA cGroup Socket program type. See <code>CgroupSock</code> for the …\nA <code>CgroupSock</code> program\nA cGroup Socket Address program type. See <code>CgroupSockAddr</code> …\nA <code>CgroupSockAddr</code> program\nDefines where to attach a <code>CgroupSockAddr</code> program.\nDefines where to attach a <code>CgroupSock</code> program.\nA cGroup Socket Option program type. See <code>CgroupSockopt</code> for …\nA <code>CgroupSockopt</code> program\nDefines where to attach a <code>CgroupSockopt</code> program.\nA cGroup Sysctl program type. See <code>CgroupSysctl</code> for the …\nA <code>CgroupSysctl</code> program\nAttach to IPv4 connect events.\nAttach to IPv6 connect events.\nA Extension program type. See <code>Extension</code> for the program …\nA <code>Extension</code> program\nAn error occurred while working with an <code>Extension</code> program.\nA <code>FEntry</code> program\nA <code>FExit</code> program\nA Flow Dissector program type.\nAttach to GetSockopt.\nAttach to IPv4 getpeername events.\nAttach to IPv6 getpeername events.\nAttach to IPv4 getsockname events.\nAttach to IPv6 getsockname events.\nAn error occurred while working with IO.\nThe program is not attached.\nA Kernel Probe program type. See <code>KProbe</code> and <code>UProbe</code> for the …\nKernel probe\nA <code>KProbe</code> program\nAn error occurred while working with a <code>KProbe</code>.\nKernel return probe\nA Linux Infrared Remote Control (LIRC) Mode2 program type. …\nA <code>LircMode2</code> program\nLoading the program failed.\nA Linux Security Module (LSM) program type. See <code>Lsm</code> for …\nA <code>Lsm</code> program\nA Lightweight Tunnel (LWT) Input program type.\nA Lightweight Tunnel (LWT) Output program type.\nA Lightweight Tunnel (LWT) Seg6local program type.\nA Lightweight Tunnel (LWT) Transmit program type.\nA map error occurred while loading or attaching a program.\nA Netfilter program type.\nThe program is not attached.\nThe program is not loaded.\nA Perf Event program type. See <code>PerfEvent</code> for the program …\nA <code>PerfEvent</code> program\nCalled after the IPv4 bind events.\nCalled after the IPv6 bind events.\nKind of probe program\nThe various eBPF programs.\nError type returned when working with programs.\nA <code>Program</code> file descriptor.\nProvides metadata information about a loaded eBPF program.\nThe type of eBPF program.\nA Raw Tracepoint program type. See <code>RawTracePoint</code> for the …\nA <code>RawTracePoint</code> program\nA Writable Raw Tracepoint program type.\nA Traffic Control (TC) Action program type.\nA Traffic Control (TC) Classifier program type. See …\nA <code>SchedClassifier</code> program\nAttach to SetSockopt.\nA Socket Lookup program type. See <code>SkLookup</code> for the program …\nA <code>SkLookup</code> program\nA Socket Message program type. See <code>SkMsg</code> for the program …\nA <code>SkMsg</code> program\nA Socket Reuseport program type.\nA Socket-to-Socket Buffer program type. See <code>SkSkb</code> for the …\nA <code>SkSkb</code> program\nAttach to IPv4 connect events.\nA Socket Operation program type. See <code>SockOps</code> for the …\nA <code>SockOps</code> program\nAttach to IPv6 connect events.\nA Socket Filter program type. See <code>SocketFilter</code> for the …\nA <code>SocketFilter</code> program\nAn error occurred while working with a <code>SocketFilter</code>.\nA Struct Ops program type.\nA Syscall program type.\nA syscall failed.\nAn error occurred while working with a TC program.\nA Tracepoint program type. See <code>TracePoint</code> for the program …\nA <code>TracePoint</code> program\nAn error occurred while working with a <code>TracePoint</code>.\nA Tracing program type. See <code>FEntry</code>, <code>FExit</code>, and …\nAttach to IPv4 udp_recvmsg events.\nAttach to IPv6 udp_recvmsg events.\nAttach to IPv4 udp_sendmsg events.\nAttach to IPv6 udp_sendmsg events.\nUser space probe\nA <code>UProbe</code> program\nAn error occurred while working with an <code>UProbe</code>.\nUser space return probe\nThe program is not of the expected type.\nThe network interface does not exist.\nAn unspecified program type.\nAn Express Data Path (XDP) program type. See <code>Xdp</code> for the …\nA <code>Xdp</code> program\nAn error occurred while working with an <code>Xdp</code> program.\nThe BTF ID for the program.\nCgroup device programs.\nCgroup skb programs.\nCgroup socket programs.\nCgroup socket address programs.\nCgroup socket option programs.\nCgroup sysctl programs.\nThe user ID of the process who loaded the program.\nExtension programs.\nReturns a file descriptor referencing the program.\nReturns the file descriptor of a program.\nFentry programs.\nFexit programs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads a program from a pinned path in bpffs.\nReturns true if the program is defined with a …\nThe unique ID for this program.\nReturns information about a loaded program with the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKernel space probes.\nProgram links.\nLirc programs.\nThe time when the program was loaded.\nReturns an iterator of <code>ProgramInfo</code> over all eBPF programs …\nLSM probes.\nThe IDs of the maps used by the program.\nHow much memory in bytes has been allocated and locked for …\nThe name of the program as was provided when it was load. …\nThe name of the program as a &amp;str.\nPerf attach links.\nPerf event programs.\nPin the program to the provided path\nReturns the program type.\nThe type of program.\nRaw tracepoints.\nThe accumulated execution count of the program.\nThe accumulated time that the program has been actively …\nThe size in bytes of the program’s JIT-compiled machine …\nThe size in bytes of the program’s translated eBPF …\nProgrammable socket lookup.\nSkmsg programs.\nSkskb programs.\nSocket option programs.\nSocket filter programs.\nThe program tag.\nNetwork traffic control programs.\nBTF-enabled raw tracepoints.\nTracepoint programs.\nCreates a new instance that shares the same underlying …\nUnloads the program from the kernel.\nUser space probes.\nThe number of verified instructions in the program.\neXpress Data Path (XDP) programs.\nThe <code>io::Error</code> returned by the <code>BPF_PROG_LOAD</code> syscall.\ninterface name\nprogram name\nThe error log produced by the kernel verifier.\nA program used to watch or prevent device interaction from …\nThe link used by CgroupDevice programs.\nThe type returned by CgroupDevice::attach. Can be passed …\nAttaches the program to the given cgroup.\nDetaches the program\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel\nPins the program to a BPF filesystem.\nQueries the cgroup for attached programs.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nA program used to inspect or filter network activity for a …\nDefines where to attach a <code>CgroupSkb</code> program.\nThe link used by CgroupSkb programs.\nThe type returned by CgroupSkb::attach. Can be passed to …\nAttach to egress.\nAttach to ingress.\nAttaches the program to the given cgroup.\nDetaches the program.\nReturns the expected attach type of the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nA program that is called on socket creation, bind and …\nDefines where to attach a <code>CgroupSock</code> program.\nThe link used by CgroupSock programs.\nThe type returned by CgroupSock::attach. Can be passed to …\nCalled after the IPv4 bind events.\nCalled after the IPv6 bind events.\nAttach to IPv4 connect events.\nAttach to IPv6 connect events.\nAttaches the program to the given cgroup.\nDetaches the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nAttach to IPv4 bind events.\nAttach to IPv6 bind events.\nA program that can be used to inspect or modify socket …\nDefines where to attach a <code>CgroupSockAddr</code> program.\nThe link used by CgroupSockAddr programs.\nThe type returned by CgroupSockAddr::attach. Can be passed …\nAttach to IPv4 connect events.\nAttach to IPv6 connect events.\nAttach to IPv4 getpeername events.\nAttach to IPv6 getpeername events.\nAttach to IPv4 getsockname events.\nAttach to IPv6 getsockname events.\nAttach to IPv4 udp_recvmsg events.\nAttach to IPv6 udp_recvmsg events.\nAttach to IPv4 udp_sendmsg events.\nAttach to IPv6 udp_sendmsg events.\nAttaches the program to the given cgroup.\nDetaches the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nA program that can be used to get or set options on …\nDefines where to attach a <code>CgroupSockopt</code> program.\nThe link used by CgroupSockopt programs.\nThe type returned by CgroupSockopt::attach. Can be passed …\nAttach to GetSockopt.\nAttach to SetSockopt.\nAttaches the program to the given cgroup.\nDetaches the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nA program used to watch for sysctl changes.\nThe link used by CgroupSysctl programs.\nThe type returned by CgroupSysctl::attach. Can be passed …\nAttaches the program to the given cgroup.\nDetaches the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nA program used to extend existing BPF programs.\nThe type returned when loading or attaching an <code>Extension</code> …\nThe link used by Extension programs.\nThe type returned by Extension::attach. Can be passed to …\nTarget BPF program does not have BTF loaded to the kernel.\nAttaches the extension.\nAttaches the extension to another program.\nDetaches the extension.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the extension inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nA program that can be attached to the entry point of …\nThe link used by FEntry programs.\nThe type returned by FEntry::attach. Can be passed to …\nAttaches the program.\nDetaches the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nA program that can be attached to the exit point of …\nThe link used by FExit programs.\nThe type returned by FExit::attach. Can be passed to …\nAttaches the program.\nDetaches the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nError detaching from debugfs\nA kernel probe.\nThe type returned when attaching a <code>KProbe</code> fails.\nThe link used by KProbe programs.\nThe type returned by KProbe::attach. Can be passed to …\nAttaches the program.\nDetaches the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>KProbe</code> if the program is a <code>kprobe</code>, or <code>KRetProbe</code> if …\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nThe file name\nThe <code>io::Error</code> returned from the file operation\nAllows multiple programs to be run in the cgroup subtree.\nAllows the program to be overridden by one in a sub-cgroup.\nProgram attachment mode.\nA file descriptor link.\nThe identifier of an <code>FdLink</code>.\nUnique Id\nInvalid link.\nA Link.\nErrors from operations on links.\nA pinned file descriptor link.\nThe Link type used by programs that are attached with …\nThe identifier of a <code>ProgAttachLink</code>.\nAllows only one BPF program in the cgroup subtree.\nSyscall failed.\nDetaches the LinkOwnedLink is gone… but this doesn’t …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>crate::programs::links::PinnedLink</code> from a valid …\nReturns the link id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPins the link to a BPF file system.\nRemoves the pinned link from the filesystem and returns an …\nAn LircMode2 Link\nThe type returned by LircMode2::attach. Can be passed to …\nA program used to decode IR into key events for a lirc …\nAttaches the program to the given lirc device.\nDetaches the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nGet ProgramInfo from this link\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nQueries the lirc device for attached programs.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nA program that attaches to Linux LSM hooks. Used to …\nThe link used by Lsm programs.\nThe type returned by Lsm::attach. Can be passed to …\nAttaches the program.\nDetaches the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nThe attachment type of PerfEvent programs.\nThe identifer of a PerfLink.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nall processes, one cpu\nPERF_TYPE_BREAKPOINT\nCalling process, any cpu\ncalling process, one cpu\nFrequency\nPERF_TYPE_HARDWARE\nPERF_TYPE_HW_CACHE\none process, any cpu\none process, one cpu\nA program that can be attached at a perf event.\nThe link used by PerfEvent programs.\nThe type returned by PerfEvent::attach. Can be passed to …\nThe scope of a PerfEvent\nThe type of perf event\nPeriod\nPERF_TYPE_RAW\nSample Policy\nPERF_TYPE_SOFTWARE\nPERF_TYPE_TRACEPOINT\nAttaches to the given perf event.\nDetaches the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\ncpu id\ncpu id\ncpu id\nprocess id\nprocess id\nA program that can be attached at a pre-defined kernel …\nThe link used by RawTracePoint programs.\nThe type returned by RawTracePoint::attach. Can be passed …\nAttaches the program to the given tracepoint.\nDetaches from a tracepoint.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nA program used to redirect incoming packets to a local …\nThe link used by SkLookup programs.\nThe type returned by SkLookup::attach. Can be passed to …\nAttaches the program to the given network namespace.\nDetaches the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nA program used to intercept messages sent with <code>sendmsg()</code>/…\nThe link used by SkMsg programs.\nThe type returned by SkMsg::attach. Can be passed to …\nAttaches the program to the given sockmap.\nDetaches the program from a sockmap.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nA program used to intercept ingress socket buffers.\nThe kind of <code>SkSkb</code> program.\nThe link used by SkSkb programs.\nThe type returned by SkSkb::attach. Can be passed to …\nA Stream Parser\nA Stream Verdict\nAttaches the program to the given socket map.\nDetaches the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nA program used to work with sockets.\nThe link used by SockOps programs.\nThe type returned by SockOps::attach. Can be passed to …\nAttaches the program to the given cgroup.\nDetaches the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nSetting the <code>SO_ATTACH_BPF</code> socket option failed.\nA program used to inspect and filter incoming packets on a …\nThe type returned when attaching a <code>SocketFilter</code> fails.\nA SocketFilter Link\nThe type returned by SocketFilter::attach. Can be passed …\nAttaches the filter on the given socket.\nDetaches the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\noriginal <code>io::Error</code>\nthe clsact qdisc is already attached\nAttach to custom parent.\nAttach to egress.\nAttach to ingress.\nnetlink error while attaching ebpf program\nA network traffic control classifier.\nThe link used by SchedClassifier programs.\nThe type returned by SchedClassifier::attach. Can be …\nTraffic control attach type.\nErrors from TC programs\nOptions for SchedClassifier attach\nAttaches the program to the given <code>interface</code> using the …\nAtomically replaces the program referenced by the provided …\nReturns the attach type.\nAttaches the program to the given <code>interface</code> with options …\nConstructs a <code>SchedClassifierLink</code> where the <code>if_name</code>, …\nDetaches the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns the assigned handle. If none was provided at …\nHandle used to uniquely identify a program at a given …\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nReturns the allocated priority. If none was provided at …\nPriority assigned to tc program with lower number = higher …\nAdd the <code>clasct</code> qdisc to the given interface.\nDetaches the programs with the given name.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nthe <code>io::Error</code> from the netlink call\nMarks a function as a BTF-enabled raw tracepoint eBPF …\nThe link used by BtfTracePoint programs.\nThe type returned by BtfTracePoint::attach. Can be passed …\nAttaches the program.\nDetaches the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nError detaching from debugfs\nA program that can be attached at a pre-defined kernel …\nThe type returned when attaching a <code>TracePoint</code> fails.\nThe link used by TracePoint programs.\nThe type returned by TracePoint::attach. Can be passed to …\nAttaches to a given trace point.\nDetaches from a trace point.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nThe file name\nThe <code>io::Error</code> returned from the file operation\nThere was an error accessing <code>filename</code>.\nThere was an error parsing <code>/etc/ld.so.cache</code>.\nThe target program could not be found.\nThere was an error resolving the target symbol.\nAn user space probe.\nThe type returned when attaching an <code>UProbe</code> fails.\nThe link used by UProbe programs.\nThe type returned by UProbe::attach. Can be passed to …\nAttaches the program.\nDetaches the program.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>UProbe</code> if the program is a <code>uprobe</code>, or <code>URetProbe</code> if …\nLoads the program inside the kernel.\nPins the program to a BPF filesystem.\nTakes ownership of the link referenced by the provided …\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nthe original error\nThe file name\nthe original <code>io::Error</code>\nThe <code>io::Error</code> returned from the file operation\npath to target\nsymbol name\nDriver mode.\nHardware mode.\nnetlink error while attaching XDP program\nReplace a previously attached XDP program.\nSkb mode.\nOnly attach if there isn’t another XDP program already …\nAn XDP program.\nThe type returned when attaching an <code>Xdp</code> program fails on …\nFlags passed to <code>Xdp::attach()</code>.\nThe link used by Xdp programs.\nThe type returned by Xdp::attach. Can be passed to …\nGet a flags value with all known bits set.\nAttaches the program to the given <code>interface</code>.\nAttaches the program to the given interface index.\nAtomically replaces the program referenced by the provided …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nDetaches the program.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the file descriptor of this Program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates a program from a pinned entry on a bpffs.\nReturns metadata information of this program.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLoads the program inside the kernel.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPins the program to a BPF filesystem.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTakes ownership of the link referenced by the provided …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnloads the program from the kernel.\nRemoves the pinned link from the filesystem.\nthe <code>io::Error</code> from the netlink call\nTracks <code>run_time</code> and <code>run_count</code> fields.\nThe type of eBPF statistic to enable.\nA system call error.\nThe name of the syscall which failed.\nEnable global statistics tracking for eBPF programs and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>io::Error</code> returned by the syscall.\nRepresents a kernel version, in major.minor.release …\nThe equivalent of LINUX_VERSION_CODE.\nReturns the kernel version of the currently running kernel.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoads kernel symbols from <code>/proc/kallsyms</code>.\nConstructor.\nGet the number of possible cpus.\nReturns the numeric IDs of the CPUs currently online.\nReturns the prefix used by syscalls.")