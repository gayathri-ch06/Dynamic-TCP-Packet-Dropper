searchState.loadedDescShard("pnet_datalink", 0, "Support for sending and receiving data link layer packets.\nA channel for sending and receiving at the data link layer.\nType of data link channel to present (Linux only).\nA generic configuration type, encapsulating all options …\nStructure for receiving packets at the data link layer. …\nTrait to enable sending <code>$packet</code> packets.\nType alias for an <code>EtherType</code>.\nA datalink channel which sends and receives Ethernet …\nFanout settings (Linux only).\nSocket fanout type (Linux only).\nOne of the components contains an invalid value, eg. …\nSend and receive layer 2 packets directly, including …\nSend and receive “cooked” packets - send and receive …\nA MAC address.\nRepresents a network interface and its associated …\nRepresents an error which occurred whilst parsing a MAC …\nThis variant should never be used.\nThe MAC address has too few components, eg. 00:11.\nThe MAC address has too many components, eg. …\nBPF/OS X only: The number of /dev/bpf* file descriptors to …\nConstruct a broadcast <code>MacAddr</code> instance.\nCreate and send a number of packets.\nCreate a new datalink channel for sending and receiving …\nLinux only: Specifies whether to read packets at the …\nA description of the interface.\nSupport for sending and receiving data link layer packets …\nOperating system specific flags for the interface.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe interface index (operating system specific).\nGet a list of available network interfaces for the current …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIP addresses and netmasks for the interface.\nReturns true if the MacAddr is a broadcast address.\nReturns true if the MacAddr is a locally administered …\nIs the interface a loopback interface?\nReturns true if the MacAddr is a multicast address.\nReturns true if the MacAddr is a unicast address.\nReturns true if the MacAddr is a universally administered …\nReturns true if a <code>MacAddr</code> is an all-zero address.\nSupport for sending and receiving data link layer packets …\nA MAC address for the interface.\nRetrieve the MAC address associated with the interface.\nThe name of the interface.\nConstruct a new <code>MacAddr</code> instance.\nGet the next ethernet frame in the channel.\nReturns the six eight-bit integers that make up this …\nThe size of buffer to use when reading packets. Defaults …\nLinux/BPF/Netmap only: The read timeout. Defaults to None.\nSend a packet.\nThe size of buffer to use when writing packets. Defaults …\nLinux/BPF/Netmap only: The write timeout. Defaults to None.\nConstruct an all-zero <code>MacAddr</code> instance.\nConfiguration for the dummy datalink backend. Contains …\nCreate a data link channel backed by FIFO queues. Useful …\nCreates a default config with one input and one output …\nGenerates a fake <code>NetworkInterface</code>. The name of the …\nReturns the argument unchanged.\nWill not use the <code>super::Config</code>. This will simply call …\nGet the <code>Sender</code> handle that can inject packets in the fake …\nGet three fake interfaces generated with …\nCalls <code>U::from(self)</code>.\nCreates a new <code>Config</code> with the given channels as the …\nGet the <code>Receiver</code> handle where packets sent to the fake …\nConfiguration for the Linux datalink backend.\nCreate a data link channel using the Linux’s <code>AF_PACKET</code> …\nSpecifies whether to read packets at the datalink layer or …\nSpecifies packet fanout option, if desired. Defaults to …\nReturns the argument unchanged.\nGet a list of available network interfaces for the current …\nCalls <code>U::from(self)</code>.\nPromiscuous mode.\nThe size of buffer to use when reading packets. Defaults …\nThe read timeout. Defaults to None.\nThe size of buffer to use when writing packets. Defaults …\nThe write timeout. Defaults to None.")