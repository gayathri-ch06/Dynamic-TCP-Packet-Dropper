searchState.loadedDescShard("pnet_transport", 0, "Support for implementing transport layer protocols\nStructure used for holding all configurable options for …\nAn iterator over packets of type <code>IcmpPacket</code>.\nAn iterator over packets of type <code>Icmpv6Packet</code>.\nRepresents a transport protocol built on top of IPv4\nAn iterator over packets of type <code>Ipv4Packet</code>.\nRepresents a transport protocol built on top of IPv6\nThe application will send and receive IPv4 packets, with …\nThe application will send and receive transport layer …\nAn iterator over packets of type <code>TcpPacket</code>.\nType of transport channel to present.\nRepresents a transport layer protocol.\nStructure used for receiving at the transport layer. …\nStructure used for sending at the transport layer. Should …\nAn iterator over packets of type <code>UdpPacket</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a packet iterator with packets of type <code>IcmpPacket</code> …\nReturn a packet iterator with packets of type <code>Icmpv6Packet</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a packet iterator with packets of type <code>Ipv4Packet</code> …\nGet the next (<code>Ipv4Packet</code>, <code>IpAddr</code>) pair for the given …\nGet the next (<code>UdpPacket</code>, <code>IpAddr</code>) pair for the given …\nGet the next (<code>IcmpPacket</code>, <code>IpAddr</code>) pair for the given …\nGet the next (<code>Icmpv6Packet</code>, <code>IpAddr</code>) pair for the given …\nGet the next (<code>TcpPacket</code>, <code>IpAddr</code>) pair for the given …\nWait only for a timespan of <code>t</code> to receive some data, then …\nWait only for a timespan of <code>t</code> to receive some data, then …\nWait only for a timespan of <code>t</code> to receive some data, then …\nWait only for a timespan of <code>t</code> to receive some data, then …\nWait only for a timespan of <code>t</code> to receive some data, then …\nSend a packet to the provided destination.\nSets a time-to-live on the socket, which then applies for …\nReturn a packet iterator with packets of type <code>TcpPacket</code> …\nCreate a new <code>(TransportSender, TransportReceiver)</code> pair.\nCreate an iterator for some packet type.\nCreate a new <code>(TransportSender, TransportReceiver)</code> pair …\nReturn a packet iterator with packets of type <code>UdpPacket</code> …")